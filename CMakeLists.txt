cmake_minimum_required(VERSION 2.8)
PROJECT(libwt)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)
include(InstallHeadersWithDirectory)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

# Some options to control build
option(ENABLE_PYTHON "Build python binding." ON)
option(INSTALL_PYTHON_USERSITE "Install python module into user site." OFF)
option(ENABLE_OPENMP "Build with OpenMP support." ON)

# Required packages
FIND_PACKAGE(FFTW3)
FIND_PACKAGE(Eigen3 REQUIRED)

# Optional packages
if(${ENABLE_OPENMP})
 FIND_PACKAGE(OpenMP)
endif(${ENABLE_OPENMP})
if(${ENABLE_PYTHON})
 FIND_PACKAGE(SWIG)
 FIND_PACKAGE(PythonInterp)
 FIND_PACKAGE(PythonLibs)
 INCLUDE(${SWIG_USE_FILE})
 # If siwg and python found -> build python interface
 SET(BUILD_PYTHON_INTERFACE ${SWIG_FOUND} AND ${PYTHONINTERP_FOUND} AND ${PYTHONLIBS_FOUND})
endif(${ENABLE_PYTHON})

# Dump config
if(${OPENMP_FOUND})
 message(STATUS "OpenMP support enabled.")
else(${OPENMP_FOUND})
 message(STATUS "OpenMP support disabled.")
endif(${OPENMP_FOUND})
if(${BUILD_PYTHON_INTERFACE})
 message(STATUS "Python interface enabled.")
else(${BUILD_PYTHON_INTERFACE})
 message(STATUS "Python interface disabled.")
endif(${BUILD_PYTHON_INTERFACE})

# compile & linker flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -Wall -Wno-unknown-pragmas -std=c++11")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -ggdb")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2")
set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS_INIT})
set(CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS_INIT})
set(CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS_INIT})

# Fix include dirs
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH} ${EIGEN3_INCLUDE_DIRS} ${FFTW3_INCLUDE_DIRS}
 "${CMAKE_CURRENT_SOURCE_DIR}/lib" "${CMAKE_CURRENT_BINARY_DIR}/lib")

SET(LIBS ${FFTW3_LIBRARIES})

SET(libwt_VERSION_MAJOR "1")
SET(libwt_VERSION_MINOR "0")
SET(libwt_VERSION_PATCH "0")

#
# Get default install directories under Linux
#
IF(UNIX AND NOT APPLE)
 INCLUDE(GNUInstallDirs)
ENDIF(UNIX AND NOT APPLE)
IF(UNIX AND APPLE)
 SET(CMAKE_INSTALL_LIBDIR "lib")
 SET(CMAKE_INSTALL_FULL_LIBDIR "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
 SET(CMAKE_INSTALL_INCLUDEDIR "include")
 SET(CMAKE_INSTALL_FULL_INCLUDEDIR "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}")
ENDIF(UNIX AND APPLE)

# Set RPATH under MacOS
SET(CMAKE_SKIP_RPATH FALSE)
SET(CMAKE_SKIP_BUILD_RPATH FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
SET(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_FULL_LIBDIR})

add_subdirectory(lib)
add_subdirectory(src)
add_subdirectory(test)
if(${BUILD_PYTHON_INTERFACE})
 add_subdirectory(python)
endif(${BUILD_PYTHON_INTERFACE})


# Source distribution packages:
set(CPACK_PACKAGE_VERSION_MAJOR ${libwt_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${libwt_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${libwt_VERSION_PATCH})
set(CPACK_SOURCE_GENERATOR "TGZ")
set(CPACK_SOURCE_PACKAGE_FILE_NAME
 "${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
set(CPACK_SOURCE_IGNORE_FILES
 "/build/;/.git/;~$;${CPACK_SOURCE_IGNORE_FILES}")

include(CPack)
